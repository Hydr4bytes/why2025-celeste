dsi/esp_lcd_panel_dpi.c:    xSemaphoreGiveFromISR(dpi_panel->draw_sem, &task_woken);
dsi/esp_lcd_panel_dpi.c:    if (dpi_panel->on_color_trans_done) {
dsi/esp_lcd_panel_dpi.c:        if (dpi_panel->on_color_trans_done(&dpi_panel->base, NULL, dpi_panel->user_ctx)) {
dsi/esp_lcd_panel_dpi.c:    mipi_dsi_hal_context_t *hal = &dpi_panel->bus->hal;
dsi/esp_lcd_panel_dpi.c:    uint8_t fb_index = dpi_panel->cur_fb_index;
dsi/esp_lcd_panel_dpi.c:    dw_gdma_link_list_handle_t link_list = dpi_panel->link_lists[fb_index];
dsi/esp_lcd_panel_dpi.c:    if (dpi_panel->on_refresh_done) {
dsi/esp_lcd_panel_dpi.c:        if (dpi_panel->on_refresh_done(&dpi_panel->base, NULL, dpi_panel->user_ctx)) {
dsi/esp_lcd_panel_dpi.c:    dpi_panel->dma_chan = dma_chan;
dsi/esp_lcd_panel_dpi.c:    for (int i = 0; i < dpi_panel->num_fbs; i++) {
dsi/esp_lcd_panel_dpi.c:        dpi_panel->link_lists[i] = link_list;
dsi/esp_lcd_panel_dpi.c:    dpi_panel->virtual_channel = panel_config->virtual_channel;
dsi/esp_lcd_panel_dpi.c:    dpi_panel->in_color_format = in_color_format;
dsi/esp_lcd_panel_dpi.c:    dpi_panel->out_color_format = out_color_format;
dsi/esp_lcd_panel_dpi.c:    dpi_panel->bus = bus;
dsi/esp_lcd_panel_dpi.c:    dpi_panel->num_fbs = num_fbs;
dsi/esp_lcd_panel_dpi.c:        dpi_panel->fbs[i] = frame_buffer;
dsi/esp_lcd_panel_dpi.c:    dpi_panel->fb_size = fb_size;
dsi/esp_lcd_panel_dpi.c:    dpi_panel->bits_per_pixel = bits_per_pixel;
dsi/esp_lcd_panel_dpi.c:    dpi_panel->h_pixels = panel_config->video_timing.h_size;
dsi/esp_lcd_panel_dpi.c:    dpi_panel->v_pixels = panel_config->video_timing.v_size;
dsi/esp_lcd_panel_dpi.c:        dpi_panel->fbcpy_handle = fbcpy_ctx;
dsi/esp_lcd_panel_dpi.c:        dpi_panel->draw_sem = xSemaphoreCreateBinaryWithCaps(DSI_MEM_ALLOC_CAPS);
dsi/esp_lcd_panel_dpi.c:        ESP_GOTO_ON_FALSE(dpi_panel->draw_sem, ESP_ERR_NO_MEM, err, TAG, "no memory for draw semaphore");
dsi/esp_lcd_panel_dpi.c:        xSemaphoreGive(dpi_panel->draw_sem);
dsi/esp_lcd_panel_dpi.c:    ret  = esp_pm_lock_create(pm_lock_type, 0, "dsi_dpi", &dpi_panel->pm_lock);
dsi/esp_lcd_panel_dpi.c:    esp_pm_lock_acquire(dpi_panel->pm_lock);
dsi/esp_lcd_panel_dpi.c:    dpi_panel->base.del = dpi_panel_del;
dsi/esp_lcd_panel_dpi.c:    dpi_panel->base.init = dpi_panel_init;
dsi/esp_lcd_panel_dpi.c:    dpi_panel->base.draw_bitmap = dpi_panel_draw_bitmap;
dsi/esp_lcd_panel_dpi.c:    *ret_panel = &dpi_panel->base;
dsi/esp_lcd_panel_dpi.c:        dpi_panel_del(&dpi_panel->base);
dsi/esp_lcd_panel_dpi.c:    esp_lcd_dsi_bus_handle_t bus = dpi_panel->bus;
dsi/esp_lcd_panel_dpi.c:    if (dpi_panel->dma_chan) {
dsi/esp_lcd_panel_dpi.c:        dw_gdma_del_channel(dpi_panel->dma_chan);
dsi/esp_lcd_panel_dpi.c:        if (dpi_panel->fbs[i]) {
dsi/esp_lcd_panel_dpi.c:            free(dpi_panel->fbs[i]);
dsi/esp_lcd_panel_dpi.c:        if (dpi_panel->link_lists[i]) {
dsi/esp_lcd_panel_dpi.c:            dw_gdma_del_link_list(dpi_panel->link_lists[i]);
dsi/esp_lcd_panel_dpi.c:    if (dpi_panel->fbcpy_handle) {
dsi/esp_lcd_panel_dpi.c:        esp_async_fbcpy_uninstall(dpi_panel->fbcpy_handle);
dsi/esp_lcd_panel_dpi.c:    if (dpi_panel->draw_sem) {
dsi/esp_lcd_panel_dpi.c:        vSemaphoreDeleteWithCaps(dpi_panel->draw_sem);
dsi/esp_lcd_panel_dpi.c:    if (dpi_panel->pm_lock) {
dsi/esp_lcd_panel_dpi.c:        esp_pm_lock_release(dpi_panel->pm_lock);
dsi/esp_lcd_panel_dpi.c:        esp_pm_lock_delete(dpi_panel->pm_lock);
dsi/esp_lcd_panel_dpi.c:    ESP_RETURN_ON_FALSE(fb_num && fb_num <= dpi_panel->num_fbs, ESP_ERR_INVALID_ARG, TAG, "invalid frame buffer number");
dsi/esp_lcd_panel_dpi.c:            *fb_itor = dpi_panel->fbs[i];
dsi/esp_lcd_panel_dpi.c:    esp_lcd_dsi_bus_handle_t bus = dpi_panel->bus;
dsi/esp_lcd_panel_dpi.c:    dw_gdma_channel_handle_t dma_chan = dpi_panel->dma_chan;
dsi/esp_lcd_panel_dpi.c:        .size = dpi_panel->fb_size * 8 / 64,
dsi/esp_lcd_panel_dpi.c:    for (int i = 0; i < dpi_panel->num_fbs; i++) {
dsi/esp_lcd_panel_dpi.c:        link_list = dpi_panel->link_lists[i];
dsi/esp_lcd_panel_dpi.c:        dma_transfer_config.src.addr = (uint32_t)(dpi_panel->fbs[i]);
dsi/esp_lcd_panel_dpi.c:    dpi_panel->cur_fb_index = 0;
dsi/esp_lcd_panel_dpi.c:    link_list = dpi_panel->link_lists[0];
dsi/esp_lcd_panel_dpi.c:    uint8_t cur_fb_index = dpi_panel->cur_fb_index;
dsi/esp_lcd_panel_dpi.c:    uint8_t *frame_buffer = dpi_panel->fbs[cur_fb_index];
dsi/esp_lcd_panel_dpi.c:    size_t fb_size = dpi_panel->fb_size;
dsi/esp_lcd_panel_dpi.c:    size_t bits_per_pixel = dpi_panel->bits_per_pixel;
dsi/esp_lcd_panel_dpi.c:    int h_res = dpi_panel->h_pixels;
dsi/esp_lcd_panel_dpi.c:    int v_res = dpi_panel->v_pixels;
dsi/esp_lcd_panel_dpi.c:    if (draw_buffer >= dpi_panel->fbs[0] && draw_buffer < dpi_panel->fbs[0] + fb_size) {
dsi/esp_lcd_panel_dpi.c:    } else if (draw_buffer >= dpi_panel->fbs[1] && draw_buffer < dpi_panel->fbs[1] + fb_size) {
dsi/esp_lcd_panel_dpi.c:    } else if (draw_buffer >= dpi_panel->fbs[2] && draw_buffer < dpi_panel->fbs[2] + fb_size) {
dsi/esp_lcd_panel_dpi.c:        uint8_t *cache_sync_start = dpi_panel->fbs[draw_buf_fb_index] + (y_start * dpi_panel->h_pixels) * bits_per_pixel / 8;
dsi/esp_lcd_panel_dpi.c:        size_t cache_sync_size = (y_end - y_start) * dpi_panel->h_pixels * bits_per_pixel / 8;
dsi/esp_lcd_panel_dpi.c:        dpi_panel->cur_fb_index = draw_buf_fb_index;
dsi/esp_lcd_panel_dpi.c:        if (dpi_panel->on_color_trans_done) {
dsi/esp_lcd_panel_dpi.c:            dpi_panel->on_color_trans_done(&dpi_panel->base, NULL, dpi_panel->user_ctx);
dsi/esp_lcd_panel_dpi.c:    } else if (!dpi_panel->fbcpy_handle) { // copy by CPU
dsi/esp_lcd_panel_dpi.c:        uint8_t *to = frame_buffer + (y_start * dpi_panel->h_pixels + x_start) * bits_per_pixel / 8;
dsi/esp_lcd_panel_dpi.c:        uint32_t bytes_per_line = bits_per_pixel * dpi_panel->h_pixels / 8;
dsi/esp_lcd_panel_dpi.c:        uint8_t *cache_sync_start = frame_buffer + (y_start * dpi_panel->h_pixels) * bits_per_pixel / 8;
dsi/esp_lcd_panel_dpi.c:        size_t cache_sync_size = (y_end - y_start) * dpi_panel->h_pixels * bits_per_pixel / 8;
dsi/esp_lcd_panel_dpi.c:        if (dpi_panel->on_color_trans_done) {
dsi/esp_lcd_panel_dpi.c:            dpi_panel->on_color_trans_done(&dpi_panel->base, NULL, dpi_panel->user_ctx);
dsi/esp_lcd_panel_dpi.c:        ESP_RETURN_ON_FALSE(xSemaphoreTake(dpi_panel->draw_sem, 0) == pdTRUE, ESP_ERR_INVALID_STATE,
dsi/esp_lcd_panel_dpi.c:            .dst_buffer_size_x = dpi_panel->h_pixels,
dsi/esp_lcd_panel_dpi.c:            .dst_buffer_size_y = dpi_panel->v_pixels,
dsi/esp_lcd_panel_dpi.c:                .color_type_id = dpi_panel->in_color_format,
dsi/esp_lcd_panel_dpi.c:        ESP_RETURN_ON_ERROR(esp_async_fbcpy(dpi_panel->fbcpy_handle, &fbcpy_trans_config, async_fbcpy_done_cb, dpi_panel), TAG, "async memcpy failed");
dsi/esp_lcd_panel_dpi.c:    esp_lcd_dsi_bus_handle_t bus = dpi_panel->bus;
dsi/esp_lcd_panel_dpi.c:    if (dpi_panel->in_color_format == COLOR_TYPE_ID(COLOR_SPACE_YUV, COLOR_PIXEL_YUV422)
dsi/esp_lcd_panel_dpi.c:            && COLOR_SPACE_TYPE(dpi_panel->out_color_format) == LCD_COLOR_SPACE_RGB) {
dsi/esp_lcd_panel_dpi.c:    esp_lcd_dsi_bus_handle_t bus = dpi_panel->bus;
dsi/esp_lcd_panel_dpi.c:    dpi_panel->on_color_trans_done = cbs->on_color_trans_done;
dsi/esp_lcd_panel_dpi.c:    dpi_panel->on_refresh_done = cbs->on_refresh_done;
dsi/esp_lcd_panel_dpi.c:    dpi_panel->user_ctx = user_ctx;
